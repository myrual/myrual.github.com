---
layout: post
title: "Erlang"
date: 2012-05-10 21:04
comments: true
categories: 
---
经过一个月的研究之后， 终于可以说彻底的了解和实现了p2p的握手方法。但是随后的问题就是就是在这个真实的复杂网络环境设计一套高可用性的握手协议。但是我相信只是时间问题。

当前的服务器端用的是python twisted，这是有历史原因的，因为最开始是TCP，后来才使用UDP，然后呢，发现基于UDP的通讯其实没有用twisted的必要。 如果以后需要服务器端搞TCP编程，那么twisted确实是很好用的，逻辑很简单。 可以直接把精力和时间放在业务逻辑上。  

但是，我打算在erlang的语言学习上花点时间。因为我打算不用twisted来实现生产环境的服务器软件，因为我感觉基于UDP的通信其实没有使用twisted的必要，反而会给代码带来很多限制。    

选择新的框架基于几个因素:  
1.  要很好的支持线程. 因为线程的编程模式实在是很清晰简单的，最好搞上几万个线程而不用担心性能和内存问题。    
2.  线程开销要小。    
3.  速度要快。    

目前结论是erlang。  
首先支持线程模式，或者说erlang的设计目标之一就是多线程。   
其次是线程开销很小。最后是响应速度快，据说毫秒级。  
其他是附带的优点： 基于消息模式传递数据，函数式编程。工业产品级别的语言，可靠性可以信赖。

缺点： 新语言，估计team里面不会有人听过。 但是另外的好处意味着我和大家一样都是新手，如果我1个星期可以写出能工作的代码，别人2个星期也该学会了。

函数式编程，我又来了。